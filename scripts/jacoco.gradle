subprojects {

    apply plugin: 'jacoco'

    task coverage(type: JacocoReport) {

        def buildVariant
        if (project.name == 'app') buildVariant = "DevDebug" else buildVariant = 'Debug'

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/$buildVariant/com/waz/zclient", excludes: fileFilter)
        def javaScalaTree = fileTree(dir: "$project.buildDir/intermediates/javac/$buildVariant/compile" + buildVariant + "JavaWithJavac/classes/com/waz", excludes: fileFilter)

        def kotlinSrc = "$project.projectDir/src/main/kotlin"
        def scalaSrc = "$project.projectDir/src/main/scala"
        def javaSrc = "$project.projectDir/src/main/java"

        sourceDirectories = files([kotlinSrc, scalaSrc, javaSrc])
        classDirectories = files([kotlinTree, javaScalaTree])
        executionData = fileTree(dir: project.buildDir, includes: [
            "jacoco/test" + buildVariant + "UnitTest.exec", 'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

task jacocoTestReport()

subprojects { project -> jacocoTestReport.dependsOn("${project.path}:coverage") }
