apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jp.leafytree.android-scala'
apply plugin: 'com.mutualmobile.gradle.plugins.dexinfo'

apply from: 'config/quality.gradle'

//region avs
//TODO: Migrate this configuration to new dependency system
ext {
    avsVersion = '5.3.191@aar'
    avsInternalVersion = avsVersion //leave this here in case we want to test specific AVS versions on internal
    avsName = 'avs'
    avsGroup = 'com.wire'

    // proprietary avs artifact configuration
    customAvsVersion = '5.5.6@aar'
    customAvsInternalVersion = customAvsVersion
    customAvsName = 'avs'
    customAvsGroup = 'com.wearezeta.avs'
}

if (project.file('user.gradle').exists()) {
    apply from: "user.gradle"
}
//endregion avs

task copyCustomResources(type: Copy) {
    if (buildtimeConfiguration.customResourcesPath == null) {
        return
    }

    def iconFolder = (buildtimeConfiguration.configuration.iconFolder ?: 'icons')
    def targetResFolder = "$rootDir/app/src/main/res"
    def iconSubFolders = [
            'ldpi': 'mipmap-ldpi',
            'mdpi': 'mipmap-mdpi',
            'hdpi': 'mipmap-hdpi',
            'xhdpi': 'mipmap-xhdpi',
            'xxhdpi': 'mipmap-xxhdpi',
            'xxxhdpi': 'mipmap-xxxhdpi'
    ]

    def resources = [
            "ic_launcher_wire.png" : (buildtimeConfiguration.configuration.launcherIcon ?: '')
    ]
    def customDir = buildtimeConfiguration.customResourcesPath
    resources.findAll { targetFileName, sourceFileName -> !sourceFileName.empty }
            .collectEntries { targetFileName, sourceFileName ->
                iconSubFolders.collectEntries { sourceSub, targetSub ->
                    [(customDir + '/' + iconFolder + '/' + sourceSub + '/' + sourceFileName) : [(targetResFolder + '/' + targetSub),  targetFileName]]
                }
            }
            .each { sourcePath, targetPath ->
                def source = file(sourcePath)
                assert source.exists()
                copy {
                    from source
                    rename { String filename -> return targetPath[1] }
                    into file(targetPath[0])
                }
                project.logger.info("Copied $sourcePath to ${targetPath[0]}/${targetPath[1]}")
            }

    copy {
        from file(customDir + '/strings/strings.xml') into file(targetResFolder + '/values')
        from file(customDir + '/strings/strings_no_translate.xml') into file(targetResFolder + '/values')
    }

    buildtimeConfiguration.configuration.languages.each { code ->
        def targetStringDir = "$targetResFolder/values-$code"
        copy {
            mkdir targetStringDir
            from file("$customDir/strings/$code/strings.xml") into file(targetStringDir)
        }
    }
}

android {
    //Trigger the licenseFormat task at least once in any compile phase
    applicationVariants.all { variant ->
        variant.javaCompiler.dependsOn(rootProject.licenseFormat)
    }

    preBuild.dependsOn(copyCustomResources)

    compileSdkVersion = rootProject.ext.compileSdkVersion
    buildToolsVersion = '28.0.3'

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv("BUILD_NUMBER") as Integer ?: 99999
        versionName Versions.ANDROID_CLIENT_MAJOR_VERSION + android.defaultConfig.versionCode
        applicationId "com.waz.zclient"
        testInstrumentationRunner "com.waz.background.TestRunner"

        manifestPlaceholders = [customURLScheme: buildtimeConfiguration.configuration.custom_url_scheme]

        buildConfigField 'Integer', 'MAX_ACCOUNTS',                  "$buildtimeConfiguration.configuration.maxAccounts"
        buildConfigField 'String',  'BACKEND_URL',                   "\"$buildtimeConfiguration.configuration.backendUrl\""
        buildConfigField 'String',  'WEBSOCKET_URL',                 "\"$buildtimeConfiguration.configuration.websocketUrl\""
        buildConfigField 'boolean', 'ACCOUNT_CREATION_ENABLED',      "$buildtimeConfiguration.configuration.allow_account_creation"
        buildConfigField 'boolean', 'ALLOW_SSO',                     "$buildtimeConfiguration.configuration.allowSSO"
        buildConfigField 'String',  'SUPPORT_EMAIL',                 "\"$buildtimeConfiguration.configuration.supportEmail\""
        buildConfigField 'String',  'FIREBASE_PUSH_SENDER_ID',       "\"$buildtimeConfiguration.configuration.firebasePushSenderId\""
        buildConfigField 'String',  'FIREBASE_APP_ID',               "\"$buildtimeConfiguration.configuration.firebaseAppId\""
        buildConfigField 'String',  'FIREBASE_API_KEY',              "\"$buildtimeConfiguration.configuration.firebaseApiKey\""
        buildConfigField 'boolean', 'ENABLE_BLACKLIST',              "$buildtimeConfiguration.configuration.enableBlacklist"
        buildConfigField 'String',  'BLACKLIST_HOST',                "\"$buildtimeConfiguration.configuration.blacklistHost\""
        buildConfigField 'String',  'CERTIFICATE_PIN_DOMAIN',        "\"$buildtimeConfiguration.configuration.certificatePin.domain\""
        buildConfigField 'String',  'CERTIFICATE_PIN_BYTES',         "\"$buildtimeConfiguration.configuration.certificatePin.certificate\""
        buildConfigField 'boolean', 'SUBMIT_CRASH_REPORTS',          "$buildtimeConfiguration.configuration.submitCrashReports"
        buildConfigField 'boolean', 'ALLOW_MARKETING_COMMUNICATION', "$buildtimeConfiguration.configuration.allowMarketingCommunication"
        buildConfigField 'boolean', 'ALLOW_CHANGE_OF_EMAIL',         "$buildtimeConfiguration.configuration.allowChangeOfEmail"
        buildConfigField 'String',  'CUSTOM_URL_SCHEME',             "\"$buildtimeConfiguration.configuration.custom_url_scheme\""
        buildConfigField 'Integer', 'NEW_PASSWORD_MINIMUM_LENGTH',   "$buildtimeConfiguration.configuration.new_password_minimum_length"
        buildConfigField 'Integer', 'NEW_PASSWORD_MAXIMUM_LENGTH',   "$buildtimeConfiguration.configuration.new_password_maximum_length"
        buildConfigField 'String',  'TEAMS_URL',                     "\"$buildtimeConfiguration.configuration.teamsUrl\""
        buildConfigField 'String',  'ACCOUNTS_URL',                  "\"$buildtimeConfiguration.configuration.accountsUrl\""
        buildConfigField 'String',  'WEBSITE_URL',                   "\"$buildtimeConfiguration.configuration.websiteUrl\""
        buildConfigField 'String',  'HTTP_PROXY_URL',                "\"$buildtimeConfiguration.configuration.http_proxy_url\""
        buildConfigField 'String',  'HTTP_PROXY_PORT',               "\"$buildtimeConfiguration.configuration.http_proxy_port\""
        buildConfigField 'boolean', 'BLOCK_ON_JAILBREAK_OR_ROOT',    "$buildtimeConfiguration.configuration.block_on_jailbreak_or_root"
        buildConfigField 'boolean', 'FORCE_HIDE_SCREEN_CONTENT',     "$buildtimeConfiguration.configuration.force_hide_screen_content"
        buildConfigField 'boolean', 'FORCE_APP_LOCK',                "$buildtimeConfiguration.configuration.force_app_lock"
        buildConfigField 'Integer', 'APP_LOCK_TIMEOUT',              "$buildtimeConfiguration.configuration.app_lock_timeout"
        buildConfigField 'boolean', 'BLOCK_ON_PASSWORD_POLICY',      "$buildtimeConfiguration.configuration.block_on_password_policy"
        buildConfigField 'boolean', 'WIPE_ON_COOKIE_INVALID',        "$buildtimeConfiguration.configuration.wipe_on_cookie_invalid"
        buildConfigField 'boolean', 'FORCE_PRIVATE_KEYBOARD',        "$buildtimeConfiguration.configuration.force_private_keyboard"
        buildConfigField 'Integer', 'PASSWORD_MAX_ATTEMPTS',         "$buildtimeConfiguration.configuration.password_max_attempts"
        buildConfigField 'boolean', 'KOTLIN_SETTINGS_MIGRATION', "false"
    }

    packagingOptions {
        // Need to exclude all armeabi/mips libs
        // as not all of our libs support these architectures
        exclude 'lib/armeabi/libgnustl_shared.so'
        exclude 'lib/mips/librs.blur.so'
        exclude 'lib/mips/librs.decode.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/armeabi/libjnidispatch.so'
        exclude 'lib/mips/libjnidispatch.so'
        exclude 'lib/mips64/libjnidispatch.so'
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
                exceptionFormat = 'full'
            }
        }
    }

    compileOptions {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion

        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    if (file("signing.gradle").exists()) {
        apply from: 'signing.gradle'
    }

    dexOptions {
        preDexLibraries false
        javaMaxHeapSize '4g'
    }

    buildTypes {
        release {
            proguardFiles 'proguard-android-optimize-wire.txt', 'proguard-rules.txt'
            minifyEnabled true
            multiDexEnabled true
            shrinkResources true
            manifestPlaceholders = [applicationVmSafeMode: "false",
                                    localyticsGcmSenderId: "\\ 826316279849"]
        }

        debug {
            // To get debugging properly working again - https://code.google.com/p/android/issues/detail?id=177480
            testCoverageEnabled = System.getenv("JOB_NAME") == "full-test-coverage"
            versionNameSuffix = " " + getDate()
            multiDexEnabled true
            manifestPlaceholders = [applicationVmSafeMode: "true",
                                    localyticsGcmSenderId: "\\ 826316279849"]
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            applicationId "com.waz.zclient.dev"
            versionName Versions.ANDROID_CLIENT_MAJOR_VERSION + android.defaultConfig.versionCode + "-dev"
            manifestPlaceholders = [applicationLabel       : "Wire Dev",
                                    applicationIcon        : "@mipmap/ic_launcher_wire_dev",
                                    sharedUserId           : "",
                                    internal_features      : "true"]
            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED', 'true'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        'true'
            buildConfigField 'boolean', 'SAFE_LOGGING',     'false'
        }

        candidate {
            applicationId "com.wire.candidate"
            versionName Versions.ANDROID_CLIENT_MAJOR_VERSION + android.defaultConfig.versionCode + "-candidate"
            manifestPlaceholders = [applicationLabel       : "Wire Candidate",
                                    applicationIcon        : "@mipmap/ic_launcher_wire_candidate",
                                    sharedUserId           : "",
                                    internal_features      : "false"]

            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED', 'true'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        "$buildtimeConfiguration.configuration.loggingEnabled"
            buildConfigField 'boolean', 'SAFE_LOGGING',     'true'
        }

        prod {
            applicationId buildtimeConfiguration.configuration.applicationId
            manifestPlaceholders = [applicationLabel       : buildtimeConfiguration.configuration.appName,
                                    applicationIcon        : "@mipmap/ic_launcher_wire",
                                    sharedUserId           : buildtimeConfiguration.configuration.userId,
                                    internal_features      : "false"]

            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED', 'false'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        "$buildtimeConfiguration.configuration.loggingEnabled"
            buildConfigField 'boolean', 'SAFE_LOGGING',     'true'
        }

        internal {
            applicationId "com.wire.internal"
            versionName Versions.ANDROID_CLIENT_MAJOR_VERSION + android.defaultConfig.versionCode + "-internal"
            manifestPlaceholders = [applicationLabel : "Wire Internal",
                                    applicationIcon  : "@mipmap/ic_launcher_wire_internal",
                                    sharedUserId     : "",
                                    internal_features: "true"]

            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED',    'true'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        'true'
            buildConfigField 'boolean', 'SAFE_LOGGING',     'true'
        }

        experimental {
            applicationId "com.wire.x"
            versionName Versions.ANDROID_CLIENT_MAJOR_VERSION + android.defaultConfig.versionCode + "-exp"
            manifestPlaceholders = [applicationLabel       : "Wire Exp",
                                    applicationIcon        : "@mipmap/ic_launcher_wire_playground",
                                    sharedUserId           : "",
                                    internal_features      : "true"]

            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED', 'true'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        'true'
            buildConfigField 'boolean', 'SAFE_LOGGING',     'true'
        }
    }


    sourceSets {

        main.java.srcDirs += ['src/main/java', 'src/main/kotlin']
        main.res.srcDirs += 'src/main/res-migration'

        androidTest {
            java.srcDirs += ['build/generated/source/apt/androidTest/dev/debug']
            java.srcDirs += ['src/androidTest/kotlin']
        }

        test {
            java.srcDirs += ['src/test/java', 'src/test/kotlin']
            scala.srcDirs += ['src/test/scala']
        }
    }

    /* to ignore error where multiple libs have this file */
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'APK_LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/proguard/coroutines.pro'
    }
}

dexinfo {
    maxDepth 2
}

dependencies {

    //region avs
    // TODO Migrate this configuration to new dependency system
    boolean internal = true
    for (String taskName : gradle.startParameter.taskNames) {
        if (taskName.contains("Prod") || taskName.contains("Candidate") || taskName == "aPR") {
            internal = false
            break
        }
    }

    // For using local files in app/libs
    //implementation (name:'avs', ext:'aar')
    //implementation (name:'audio-notifications', ext:'aar')
    //implementation (name:'zmessaging-android', ext:'aar')

    implementation "$avsGroup:$avsName:${internal ? avsInternalVersion : avsVersion}"
    //endregion avs

    implementation LegacyDependencies.scalaLibrary
    implementation LegacyDependencies.scalaReflect
    implementation LegacyDependencies.scalaShapeless

    implementation BuildDependencies.kotlin.standardLibrary
    implementation BuildDependencies.kotlin.coroutinesCore
    implementation BuildDependencies.kotlin.coroutinesAndroid

    // TODO uncomment when new dependency system supports avs
//    implementation BuildDependencies.wire.avs
    implementation BuildDependencies.wire.audioNotifications
    //don't include wire translations for custom builds
    if (buildtimeConfiguration.customResourcesPath == null) {
        implementation BuildDependencies.wire.translations
    }

    implementation BuildDependencies.libPhoneNumber

    api project(ModuleDependencies.storage)
    api(project(ModuleDependencies.syncEngine)) {
        exclude group: 'com.wire', module: 'avs'
    }

    //Android
    implementation BuildDependencies.androidX.material
    implementation BuildDependencies.androidX.multidex
    implementation BuildDependencies.androidX.appCompat
    implementation BuildDependencies.androidX.recyclerView
    implementation BuildDependencies.androidX.preference
    implementation BuildDependencies.androidX.cardView
    implementation BuildDependencies.androidX.gridLayout
    implementation BuildDependencies.androidX.constraintLayout
    implementation BuildDependencies.androidX.paging
    implementation BuildDependencies.androidX.exifInterface
    implementation BuildDependencies.androidX.media
    implementation BuildDependencies.androidX.lifecycleRuntime
    implementation BuildDependencies.androidX.lifecycleLiveData
    implementation BuildDependencies.androidX.lifecycleViewModel
    implementation BuildDependencies.androidX.lifecycleExtensions
    implementation BuildDependencies.androidX.roomRuntime
    implementation BuildDependencies.androidX.roomKtx
    implementation BuildDependencies.androidX.coreKtx
    implementation BuildDependencies.androidX.biometric
    implementation(BuildDependencies.androidX.workManager) {
        exclude group: 'androidx.room', module: 'room-runtime'
    }
    annotationProcessor BuildDependencies.androidX.annotation

    // Play services
    implementation BuildDependencies.playServices.base
    implementation BuildDependencies.playServices.maps
    implementation BuildDependencies.playServices.location
    implementation BuildDependencies.playServices.gcm

    // Firebase
    implementation (BuildDependencies.fireBaseMessaging) {
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    //Glide
    implementation(BuildDependencies.glide.core){
        exclude group: 'com.android.support'
        transitive = true
    }
    annotationProcessor BuildDependencies.glide.compiler

    //Retrofit
    implementation BuildDependencies.retrofit.core
    implementation BuildDependencies.retrofit.protoBufConverter
    implementation BuildDependencies.retrofit.gsonConverter

    //OkHttp
    implementation BuildDependencies.okHttpLoggingInterceptor

    //DI - Koin
    implementation BuildDependencies.koin.androidCore
    implementation BuildDependencies.koin.androidScope
    implementation BuildDependencies.koin.androidViewModel

    // RxJava
    implementation BuildDependencies.rxJava.rxKotlin
    implementation BuildDependencies.rxJava.rxAndroid

    //third party libraries
    implementation BuildDependencies.androidJob
    implementation(BuildDependencies.threetenbpAndroid) {
        exclude group: 'org.threeten', module: 'threetenbp'
    }
    implementation BuildDependencies.threetenbpJava
    implementation BuildDependencies.rebound
    implementation BuildDependencies.commonMark
    implementation BuildDependencies.jna

    // Unit Tests
    testImplementation TestDependencies.jUnit
    testImplementation TestDependencies.mockito.core
    testImplementation TestDependencies.mockito.inline
    testImplementation TestDependencies.kluent
    testImplementation BuildDependencies.kotlin.coroutinesCore
    testImplementation TestDependencies.kotlin.coroutinesTest
    testImplementation TestDependencies.androidX.testCore
    testImplementation TestDependencies.okHttpMockWebServer
    testImplementation(LegacyDependencies.scalaTest) { exclude module: 'scala-library' }

    // Functional Tests
    androidTestImplementation TestDependencies.jUnit
    androidTestImplementation TestDependencies.mockito.core
    androidTestImplementation TestDependencies.kluent
    androidTestImplementation TestDependencies.androidX.testJunit
    androidTestImplementation TestDependencies.androidX.testRules
    androidTestImplementation TestDependencies.androidX.testWorkManager

    // Development - Experimental
    devImplementation DevDependencies.stetho
    experimentalImplementation DevDependencies.stetho
    internalImplementation DevDependencies.stetho

    // Legacy Scala
    ScalaCompileOptions.metaClass.daemonServer = true
    ScalaCompileOptions.metaClass.fork = true
    ScalaCompileOptions.metaClass.useAnt = false
    ScalaCompileOptions.metaClass.useCompileDaemon = false
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-feature",
        "-Xfuture",
        "-Xfatal-warnings",
        "-deprecation",
        "-Ywarn-unused-import",
        "-encoding",
        "UTF-8"]
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('MM/dd HH:mm:ss')
    return formattedDate
}

static def buildSuffixForVersion(String versionString) {
    if (versionString.matches("\\d+\\.\\d+\\.\\d+(-[.0-9a-zA-Z]+)")) "" else "-DEV"
}

//add pretty naming to apk filename
android.applicationVariants.all { variant ->
    def appName
    //Check if an applicationName property is supplied; if not use the name of the parent project.
    if (project.hasProperty("applicationName")) {
        appName = applicationName
    } else {
        appName = "wire"
    }

    variant.outputs.each { output ->
        def newApkName
        if(buildtimeConfiguration.isCustomBuild()) {
            newApkName = "${appName}-${buildtimeConfiguration.configuration.applicationId}-${output.baseName}-${Versions.ANDROID_CLIENT_MAJOR_VERSION}${android.defaultConfig.versionCode}.apk"
        } else {
            newApkName = "${appName}-${output.baseName}-${Versions.ANDROID_CLIENT_MAJOR_VERSION}${android.defaultConfig.versionCode}.apk"
        }
        output.outputFileName = new File("../..", newApkName)
    }
}

