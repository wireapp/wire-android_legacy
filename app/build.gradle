apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jp.leafytree.android-scala'
apply plugin: 'hugo'
apply plugin: 'com.mutualmobile.gradle.plugins.dexinfo'
apply from: 'config/quality.gradle'


repositories {
    flatDir {
        dirs 'libs'
    }
}

ext {
    majorVersion = "3.42."

    audioVersion = System.getenv("AUDIO_VERSION") ?: '1.209.0@aar'

    avsVersion = '5.3.191@aar'
    avsInternalVersion = avsVersion //leave this here in case we want to test specific AVS versions on internal
    avsName = 'avs'
    avsGroup = 'com.wire'

    // proprietary avs artifact configuration
    customAvsVersion = '5.3.29@aar'
    customAvsInternalVersion = customAvsVersion
    customAvsName = 'avs'
    customAvsGroup = 'com.wearezeta.avs'

}

if (project.file('user.gradle').exists()) {
    apply from: "user.gradle"
}

task copyCustomResources(type: Copy) {
    if (buildtimeConfiguration.customResourcesPath == null) {
        return
    }

    def iconFolder = (buildtimeConfiguration.configuration.iconFolder ?: 'icons')
    def targetResFolder = "$rootDir/app/src/main/res"
    def iconSubfolders = [
            'ldpi': 'drawable-ldpi',
            'mdpi': 'drawable-mdpi',
            'hdpi': 'drawable-hdpi',
            'xhdpi': 'drawable-xhdpi',
            'xxhdpi': 'drawable-xxhdpi',
            'xxxhdpi': 'drawable-xxxhdpi'
    ]

    def resources = [
            "ic_launcher_wire.png" : (buildtimeConfiguration.configuration.launcherIcon ?: '')
    ]
    def customDir = buildtimeConfiguration.customResourcesPath
    resources.findAll { targetFileName, sourceFileName -> !sourceFileName.empty }
            .collectEntries { targetFileName, sourceFileName ->
                iconSubfolders.collectEntries { sourceSub, targetSub ->
                    [(customDir + '/' + iconFolder + '/' + sourceSub + '/' + sourceFileName) : [(targetResFolder + '/' + targetSub),  targetFileName]]
                }
            }
            .each { sourcePath, targetPath ->
                def source = file(sourcePath)
                assert source.exists()
                copy {
                    from source
                    rename { String filename -> return targetPath[1] }
                    into file(targetPath[0])
                }
                project.logger.info("Copied $sourcePath to ${targetPath[0]}/${targetPath[1]}")
            }

    copy {
        from file(customDir + '/strings/strings.xml') into file(targetResFolder + '/values')
        from file(customDir + '/strings/strings_no_translate.xml') into file(targetResFolder + '/values')
    }

    buildtimeConfiguration.configuration.languages.each { code ->
        def targetStringDir = "$targetResFolder/values-$code"
        copy {
            mkdir targetStringDir
            from file("$customDir/strings/$code/strings.xml") into file(targetStringDir)
        }
    }
}

android {
    //Trigger the licenseFormat task at least once in any compile phase
    applicationVariants.all { variant ->
        variant.javaCompiler.dependsOn(rootProject.licenseFormat)

    }

    preBuild.dependsOn(copyCustomResources)

    compileSdkVersion = rootProject.ext.compileSdkVersion
    buildToolsVersion = '28.0.3'

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv("BUILD_NUMBER") as Integer ?: 99999
        versionName majorVersion + android.defaultConfig.versionCode
        applicationId "com.waz.zclient"
        testInstrumentationRunner "com.waz.background.TestRunner"
        
        manifestPlaceholders = [customURLScheme: buildtimeConfiguration.configuration.custom_url_scheme]

        buildConfigField 'Integer', 'MAX_ACCOUNTS',                  "$buildtimeConfiguration.configuration.maxAccounts"
        buildConfigField 'String',  'BACKEND_URL',                   "\"$buildtimeConfiguration.configuration.backendUrl\""
        buildConfigField 'String',  'WEBSOCKET_URL',                 "\"$buildtimeConfiguration.configuration.websocketUrl\""
        buildConfigField 'boolean', 'ACCOUNT_CREATION_ENABLED',      "$buildtimeConfiguration.configuration.allow_account_creation"
        buildConfigField 'boolean', 'ALLOW_SSO',                     "$buildtimeConfiguration.configuration.allowSSO"
        buildConfigField 'String',  'SUPPORT_EMAIL',                 "\"$buildtimeConfiguration.configuration.supportEmail\""
        buildConfigField 'String',  'FIREBASE_PUSH_SENDER_ID',       "\"$buildtimeConfiguration.configuration.firebasePushSenderId\""
        buildConfigField 'String',  'FIREBASE_APP_ID',               "\"$buildtimeConfiguration.configuration.firebaseAppId\""
        buildConfigField 'String',  'FIREBASE_API_KEY',              "\"$buildtimeConfiguration.configuration.firebaseApiKey\""
        buildConfigField 'boolean', 'ENABLE_BLACKLIST',              "$buildtimeConfiguration.configuration.enableBlacklist"
        buildConfigField 'String',  'BLACKLIST_HOST',                "\"$buildtimeConfiguration.configuration.blacklistHost\""
        buildConfigField 'String',  'CERTIFICATE_PIN_DOMAIN',        "\"$buildtimeConfiguration.configuration.certificatePin.domain\""
        buildConfigField 'String',  'CERTIFICATE_PIN_BYTES',         "\"$buildtimeConfiguration.configuration.certificatePin.certificate\""
        buildConfigField 'boolean', 'SUBMIT_CRASH_REPORTS',          "$buildtimeConfiguration.configuration.submitCrashReports"
        buildConfigField 'boolean', 'ALLOW_MARKETING_COMMUNICATION', "$buildtimeConfiguration.configuration.allowMarketingCommunication"
        buildConfigField 'boolean', 'ALLOW_CHANGE_OF_EMAIL',         "$buildtimeConfiguration.configuration.allowChangeOfEmail"
        buildConfigField 'String',  'CUSTOM_URL_SCHEME',             "\"$buildtimeConfiguration.configuration.custom_url_scheme\""
        buildConfigField 'Integer', 'NEW_PASSWORD_MINIMUM_LENGTH',   "$buildtimeConfiguration.configuration.new_password_minimum_length"
        buildConfigField 'Integer', 'NEW_PASSWORD_MAXIMUM_LENGTH',   "$buildtimeConfiguration.configuration.new_password_maximum_length"
        buildConfigField 'String',  'TEAMS_URL',                     "\"$buildtimeConfiguration.configuration.teamsUrl\""
        buildConfigField 'String',  'ACCOUNTS_URL',                  "\"$buildtimeConfiguration.configuration.accountsUrl\""
        buildConfigField 'String',  'WEBSITE_URL',                   "\"$buildtimeConfiguration.configuration.websiteUrl\""
        buildConfigField 'String',  'HTTP_PROXY_URL',                "\"$buildtimeConfiguration.configuration.http_proxy_url\""
        buildConfigField 'String',  'HTTP_PROXY_PORT',               "\"$buildtimeConfiguration.configuration.http_proxy_port\""
        buildConfigField 'boolean', 'BLOCK_ON_JAILBREAK_OR_ROOT',    "$buildtimeConfiguration.configuration.block_on_jailbreak_or_root"
        buildConfigField 'boolean', 'FORCE_HIDE_SCREEN_CONTENT',     "$buildtimeConfiguration.configuration.force_hide_screen_content"
        buildConfigField 'boolean', 'FORCE_APP_LOCK',                "$buildtimeConfiguration.configuration.force_app_lock"
        buildConfigField 'Integer', 'APP_LOCK_TIMEOUT',              "$buildtimeConfiguration.configuration.app_lock_timeout"
        buildConfigField 'boolean', 'BLOCK_ON_PASSWORD_POLICY',      "$buildtimeConfiguration.configuration.block_on_password_policy"
        buildConfigField 'boolean', 'WIPE_ON_COOKIE_INVALID',        "$buildtimeConfiguration.configuration.wipe_on_cookie_invalid"
        buildConfigField 'boolean', 'FORCE_PRIVATE_KEYBOARD',        "$buildtimeConfiguration.configuration.force_private_keyboard"
        buildConfigField 'Integer', 'PASSWORD_MAX_ATTEMPTS',         "$buildtimeConfiguration.configuration.password_max_attempts"
    }

    packagingOptions {
        // Need to exclude all armeabi/mips libs
        // as not all of our libs support these architectures
        exclude 'lib/armeabi/libgnustl_shared.so'
        exclude 'lib/armeabi/libspotify_embedded_shared.so'
        exclude 'lib/armeabi/libspotify_sdk.so'
        exclude 'lib/mips/librs.blur.so'
        exclude 'lib/mips/librs.decode.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/armeabi/libjnidispatch.so'
        exclude 'lib/mips/libjnidispatch.so'
        exclude 'lib/mips64/libjnidispatch.so'
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
                exceptionFormat = 'full'
            }
        }
    }

    compileOptions {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion
    }

    if (file("signing.gradle").exists()) {
        apply from: 'signing.gradle'
    }

    dexOptions {
        preDexLibraries false
        javaMaxHeapSize '4g'
    }

    buildTypes {
        release {
            proguardFiles 'proguard-android-optimize-wire.txt', 'proguard-rules.txt'
            minifyEnabled true
            multiDexEnabled true
            shrinkResources true
            manifestPlaceholders = [applicationVmSafeMode: "false",
                                    localyticsGcmSenderId: "\\ 826316279849"]
        }

        debug {
            // To get debugging properly working again - https://code.google.com/p/android/issues/detail?id=177480
            testCoverageEnabled = System.getenv("JOB_NAME") == "full-test-coverage"
            versionNameSuffix = " " + getDate()
            multiDexEnabled true
            manifestPlaceholders = [applicationVmSafeMode: "true",
                                    localyticsGcmSenderId: "\\ 826316279849"]
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            applicationId "com.waz.zclient.dev"
            versionName majorVersion + android.defaultConfig.versionCode + "-dev"
            manifestPlaceholders = [applicationLabel       : "Wire Dev",
                                    applicationIcon        : "@drawable/ic_launcher_wire_dev",
                                    sharedUserId           : "",
                                    internal_features      : "true"]
            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED', 'true'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        'true'
            buildConfigField 'boolean', 'SAFE_LOGGING',     'false'
        }

        candidate {
            applicationId "com.wire.candidate"
            versionName majorVersion + android.defaultConfig.versionCode + "-candidate"
            manifestPlaceholders = [applicationLabel       : "Wire Candidate",
                                    applicationIcon        : "@drawable/ic_launcher_wire_candidate",
                                    sharedUserId           : "",
                                    internal_features      : "false"]

            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED', 'true'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        "$buildtimeConfiguration.configuration.loggingEnabled"
            buildConfigField 'boolean', 'SAFE_LOGGING',     'true'
        }

        prod {
            applicationId buildtimeConfiguration.configuration.applicationId
            manifestPlaceholders = [applicationLabel       : buildtimeConfiguration.configuration.appName,
                                    applicationIcon        : "@drawable/ic_launcher_wire",
                                    sharedUserId           : buildtimeConfiguration.configuration.userId,
                                    internal_features      : "false"]

            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED', 'false'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        "$buildtimeConfiguration.configuration.loggingEnabled"
            buildConfigField 'boolean', 'SAFE_LOGGING',     'true'
        }

        internal {
            applicationId "com.wire.internal"
            versionName majorVersion + android.defaultConfig.versionCode + "-internal"
            manifestPlaceholders = [applicationLabel : "Wire Internal",
                                    applicationIcon  : "@drawable/ic_launcher_wire_internal",
                                    sharedUserId     : "",
                                    internal_features: "true"]

            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED',    'true'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        'true'
            buildConfigField 'boolean', 'SAFE_LOGGING',     'true'
        }

        experimental {
            applicationId "com.wire.x"
            versionName majorVersion + android.defaultConfig.versionCode + "-exp"
            manifestPlaceholders = [applicationLabel       : "Wire Exp",
                                    applicationIcon        : "@drawable/ic_launcher_wire_playground",
                                    sharedUserId           : "",
                                    internal_features      : "true"]

            buildConfigField 'boolean', 'DEVELOPER_FEATURES_ENABLED', 'true'
            buildConfigField 'boolean', 'LOGGING_ENABLED',        'true'
            buildConfigField 'boolean', 'SAFE_LOGGING',     'true'
        }
    }


    sourceSets {
        androidTest {
            java.srcDirs += ['build/generated/source/apt/androidTest/dev/debug']
            java.srcDirs += ['src/androidTest/kotlin']
        }

        test {
            scala.srcDirs += ['src/test/scala']
        }
    }

    /* to ignore error where multiple libs have this file */
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'APK_LICENSE.txt'
        exclude 'LICENSE.txt'
    }

}

dexinfo {
    maxDepth 2
}

def versions = [
    playServices : "15.0.1", //TODO can be independent now.
    stetho: "1.5.0",
    work_manager : "1.0.0-alpha13",
    paging : "1.0.0",
    dexmaker : "1.4"
]

dependencies {
    implementation project(':lintlib')

    //    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.scala-lang:scala-library:$scalaVersion"
    implementation "org.scala-lang:scala-reflect:$scalaVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "com.chuusai:shapeless_$rootProject.ext.scalaMajorVersion:2.3.3"

    //wire libraries:
    implementation "com.wire:audio-notifications:$audioVersion"
    //don't include wire translations for custom builds
    if (buildtimeConfiguration.customResourcesPath == null) {
        implementation 'com.wire:wiretranslations:1.+'
    }

    // TODO  Nasty hack to be able to build add only one wire-core flavor to the build

    // TODO  (I know, it sucks, will think of a better way to do this, and we need this

    // TODO   when there are different SE APIs in dev vs internal/prod)
    boolean internal = true
    for (String taskName : gradle.startParameter.taskNames) {
        if (taskName.contains("Prod") || taskName.contains("Candidate") || taskName == "aPR") {
            internal = false
            break
        }
    }

    // For using local files in app/libs
    //implementation (name:'avs', ext:'aar')
    //implementation (name:'audio-notifications', ext:'aar')
    //implementation (name:'zmessaging-android', ext:'aar')

    implementation "$avsGroup:$avsName:${internal ? avsInternalVersion : avsVersion}"
    api(project(':wire-android-sync-engine:zmessaging')) {
        exclude group: 'com.wire', module: 'avs'
    }
    implementation "$rootProject.deps.libphonenumber"

    //support libraries
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation "com.google.android.material:material:1.0.0"
    implementation "androidx.appcompat:appcompat:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation "androidx.preference:preference:1.0.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.gridlayout:gridlayout:1.0.0"
    annotationProcessor "androidx.annotation:annotation:1.0.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.paging:paging-runtime:2.0.0"
    implementation "androidx.exifinterface:exifinterface:1.0.0"
    implementation "androidx.media:media:1.0.0"

    // Play services
    implementation "com.google.android.gms:play-services-base:$versions.playServices"
    implementation "com.google.android.gms:play-services-maps:$versions.playServices"
    implementation "com.google.android.gms:play-services-location:$versions.playServices"
    implementation "com.google.android.gms:play-services-gcm:$versions.playServices"
    implementation ('com.google.firebase:firebase-messaging:17.3.0') {
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    //WorkManager
    implementation "androidx.work:work-runtime:2.0.1"

    //third party libraries
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.evernote:android-job:1.2.6'
    implementation 'com.jakewharton.timber:timber:4.7.0'
    implementation('com.jakewharton.threetenabp:threetenabp:1.1.0') {
        exclude group: 'org.threeten', module: 'threetenbp'
    }
    implementation "org.threeten:threetenbp:$rootProject.ext.versions.threetenbp"
    implementation 'com.facebook.rebound:rebound:0.3.8'
    implementation 'com.atlassian.commonmark:commonmark:0.11.0'
    implementation 'net.java.dev.jna:jna:4.4.0@aar'
    devImplementation "com.facebook.stetho:stetho:$versions.stetho"
    experimentalImplementation "com.facebook.stetho:stetho:$versions.stetho"
    internalImplementation "com.facebook.stetho:stetho:$versions.stetho"
    implementation("com.github.bumptech.glide:glide:4.10.0"){
        exclude group: 'com.android.support'
        transitive = true
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'

    // biometric prompt
    implementation 'androidx.biometric:biometric:1.0.0-rc02'

    // Test dependencies
    testImplementation "junit:junit:$rootProject.ext.versions.junit"
    testImplementation("$rootProject.deps.scalaTest") {
        exclude module: 'scala-library'
    }
    testImplementation 'org.mockito:mockito-core:1.10.19'
    //The dexmaker stuff is needed for Mockito to work completely
    testImplementation "com.crittercism.dexmaker:dexmaker:$versions.dexmaker"
    testImplementation "com.crittercism.dexmaker:dexmaker-dx:$versions.dexmaker"
    testImplementation "com.crittercism.dexmaker:dexmaker-mockito:$versions.dexmaker"
    testImplementation "androidx.paging:paging-common:2.0.0"

    androidTestImplementation "junit:junit:$rootProject.ext.versions.junit"
    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'

    //The dexmaker stuff is needed for Mockito to work completely
    androidTestImplementation "com.crittercism.dexmaker:dexmaker:$versions.dexmaker"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-dx:$versions.dexmaker"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-mockito:$versions.dexmaker"
    androidTestImplementation "androidx.work:work-testing:2.0.1"

    ScalaCompileOptions.metaClass.daemonServer = true
    ScalaCompileOptions.metaClass.fork = true
    ScalaCompileOptions.metaClass.useAnt = false
    ScalaCompileOptions.metaClass.useCompileDaemon = false
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-feature",
        "-Xfuture",
        "-Xfatal-warnings",
        "-deprecation",
        "-Ywarn-unused-import",
        "-encoding",
        "UTF-8"]
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('MM/dd HH:mm:ss')
    return formattedDate
}

static def buildSuffixForVersion(String versionString) {
    if (versionString.matches("\\d+\\.\\d+\\.\\d+(-[.0-9a-zA-Z]+)")) "" else "-DEV"
}

//add pretty naming to apk filename
android.applicationVariants.all { variant ->
    def appName
    //Check if an applicationName property is supplied; if not use the name of the parent project.
    if (project.hasProperty("applicationName")) {
        appName = applicationName
    } else {
        appName = "wire"
    }

    variant.outputs.each { output ->
        def newApkName
        if(buildtimeConfiguration.isCustomBuild()) {
            newApkName = "${appName}-${buildtimeConfiguration.configuration.applicationId}-${output.baseName}-${majorVersion}${android.defaultConfig.versionCode}.apk"
        } else {
            newApkName = "${appName}-${output.baseName}-${majorVersion}${android.defaultConfig.versionCode}.apk"
        }


        output.outputFileName = new File("../..", newApkName)
    }
}

