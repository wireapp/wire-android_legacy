apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'jp.leafytree.android-scala'
apply from: "${project.rootDir}/app/config/quality.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main.scala.srcDir "src/main/java"
    sourceSets.main.java.srcDirs = []
}

dependencies {
    compile deps.appcompatv7
    compile deps.timber
    compile deps.threetenabp

    // TODO  Nasty hack to be able to build add only one wire-core flavor to the build
    // TODO  (I know, it sucks, will think of a better way to do this, and we need this
    // TODO   when there are different SE APIs in dev vs internal/prod)
    boolean dev = true;
    boolean internal = false;
    boolean prod = false;
    for (String taskName : gradle.startParameter.taskNames) {
        if (taskName.contains("Dev")) {
            dev = true;
            break;
        }
        if (taskName.contains("Internal") || taskName.contains("Experimental") || taskName.contains("Qa") || taskName.contains("Avs")) {
            internal = true;
            dev = false;
            break;
        }
        if (taskName.contains("Prod") || taskName.contains("Candidate")) {
            prod = true;
            dev = false;
            break;
        }
    }

    def avs_artifact = "$avsGroup:$avsName";
    def avs_version = avsInternalVersion;
    def se_version = zMessagingReleaseVersion;

    if (dev) {
        avs_version = avsInternalVersion;
        se_version = zMessagingDevVersion;
    }

    if (internal) {
        avs_version = avsInternalVersion;
        se_version = zMessagingDevVersion;
    }

    if (prod) {
        avs_version = avsVersion;
    }

    compile "$avs_artifact:$avs_version"
    compile("com.wire:zmessaging-android:$se_version") {
        transitive = true
    }
}
